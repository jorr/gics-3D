#point(400,200,300) -> p1
#point(200,300,300) -> p2
#segment(p1,[0,0,100]) -> s[.,p3]
#line(s) -> .

#rectangle(s,d:45) -> R
#rectangle([[p1.x,p1.y+100,p1.z],[p3.x,p3.y+100,p3.z]],d:45) -> R2
#cuboid(R,100,"-") -> CR
#cuboid(R,R2) -> CR2

#autolabel("on")

#rhomb([p1,p2],200) -> R
#rhomb(["Oxy"]) -> RH
#parallelogram([p1,p2],100,d:45) -> PL
#parallelogram([p1,p2],d:45,100) -> PL
#parallelogram(["Oxz"]) -> PLXZ


#plane(p1,s) -> pl
#plane([0,500,0],[-500,500,500],[-500,0,0]) -> testPL
#plane([[500,500,0],[500,0,0]],[[500,500,0],[-500,500,1000]]) -> pl2

#translate(s,10,10,0) -> s1

#cube(100) -> cb

#segment(p1,[0,0,0]) -> s2

#plane(p1,p2,[300,200,300]) -> p123
#point(p123) -> p4
#plane("Oyz") -> xzpl
#plane([0,100,0],["Oxz"]) -> xzparallel
#intersect(pl2,xzparallel) -> .
#normal(xzparallel) -> np
#project(p2,xzparallel) -> p2'
#point(100,200,100) -> prp
#segment([0,0,0],prp) -> prs[O,.]
#line([p1,O]) -> l
#project(prp,xzparallel) -> prp'
#project(prs,xzparallel) -> prs'
#intersect(prs,prs') -> X
#line("Oy") -> -Oy
#autolabel("off")
#intersect(["Oy"],xzparallel) -> Y
#label("Y",Y,"SE",20)
#should throw an error
#intersect(line("Ox"),xzparallel) -> test
#intersect(l,xzparallel) -> p3O

#line(s) -> ls
#transversal(ls,["Ox"]) -> tr
#label("tr",tr)

#quad(p1,p2,p3,p4) -> Q
#quad(p123) -> Q1
#quad([100,0,100],[200,300,100],[40,40,100],[0,200,100]) -> QQ
#bisector(QQ,QQ.A) -> BSQ
#quad(["Oxy"]) -> Q2[.,B,.,.]
#altitude(Q2,Q2.B,Q2.AD) -> h[H]

#polygon(5, ["Oxy"]) -> PG1
#polygon(p1, 5, 200) -> PG2
#plane(p3,["Oxy"]) -> p3Oxy
#polygon([p3,[0,100,100]],4,p3Oxy) -> PG3

#point(100,100,30) -> p1
#point(-100,-100,-30) -> p2
#segment(p1,p2) -> s

#point(0,95,0) -> d
#line(d,["Oz"],d:90) -> ll

#circle([0,0,0],200,["Oxz"]) -> -c

#sphere(c) -> sp

#square([300,0,300],[100,0,100],["Oxz"]) -> sq1[A,.,.,.]
#line(sq1.AB) -> lAB

#square(["Oxz"]) -> -sq[A,B,C,D]
#color("red")
#linestyle(1,"altern")
#square(["Oxz"]) -> -sq
#produce(sq.AB) -> .[A,B]
#plane(A,["Oxz"]) -> AOxz
#square([[A.x,A.y+200,A.z],[B.x,B.y+200,B.z]],AOxz) -> sq2[A1,B1,C1,D1]
#prism(sq,100,"-") -> pr
#prism(sq,s) -> pr2
#altitude(pr2,D) -> .[H]
#triangle(pr2.base2.D,H,pr2.base2.A) -> .
#prism(sq,sq2) -> pr3

#triangle(["Oxz"]) -> -ptr
#prism(ptr,100,"-") -> prr
#quad(["Oyz"]) -> -q
#pyramid(q,200) -> qpyr

#cube(sq) -> .
#pyramid(sq,200) -> pyr
#altitude(pyr) -> .

#cylinder(c, 90) -> C

#triangle(p1,p2,d) -> tr
#autolabel("on")
#triangle([-100,0,0],[100,0,0],[100,0,300]) -> -t[A,B,C]
#color(t,"blue")
#bisector(t,A) -> BSC
#altitude(t,"B") -> .

#pyramid(t,150) -> p

#cone(c,d) -> CN
#cone(c,200) -> CN2
#cone(t,"a") -> CN3
#height(CN) -> H
#produce(CN2)

#label("t",t,"N",10)

#anglemark(B,A,C,".)")
#segmentmark(t.AB)


#----------------------

#plane(["Oz"],["Oxz"],d:45) -> p
#line([0,0,30],["Oxz"],d:45) -> l1
#line([0,0,30],["Oxz"]) -> l2
#point([0,0,30],10,0,0) -> pl2
#point([0,0,30],10,10,0) -> pl1
#anglemark(pl1,[0,0,30],pl2,")")

#------------------------

#segment([20,0,20],[150,90,100]) -> p[zero,x]
#project(p,["Oxz"]) -> p'[.,xp]
#segment(xp,x) -> n
#arrowmark(p)
#arrowmark(n)
#arrowmark(p')
#anglemark(zero,x,xp,")",15)
#linestyle(n, 1.0, "dashed")
#label("&{alpha}",x,"SSW",20)
#label("p",p,"N",15)
#label("n",n,"E",15)
#label("p'",p',"S",15)

#---------------------------

#projectionmode("perspective")
#cube(200*sqrt(2)) -> cb
#square([[0,0,0],[200,0,0]],["Oxz"]) -> -sq
#cube(sq,200) -> cb
#normal(cb.base,cb.base.cen) -> n1
#intersect(["Oy"],cb.base) -> X
#label("X",X)
#autolabel("on")
#translate(cb.base,0,-100,0) -> ha
#intersect(["Oy"],ha) -> XA
#label("XA",XA)
#autolabel("off")
#line(ha.cen,["Oz"]) -> -Ozparallel
#rotate(ha,d:45,Ozparallel) -> he
#scale(ha,2) -> ho
#point(200,100,100) -> P
#line([[0,200,200],[200,200,200]]) -> x
#line([[0,0,0],[200,100,100]]) -> l
#linestyle(l,1.0,"dotted")
#intersect(["Ox"],cb) -> XC[x1c,x2c]
#intersect(l,cb) -> L
#label("P",L.p2,"SE",20)
#intersect(l,x) -> Q
#label("Q",Q,"SE",20)
#label("x1c",x1c)
#plane([-50,0,0],["Oyz"]) -> -pl
#intersect(pl,cb) -> inter
#plane("Oxz") -> .

#projectionmode("perspective")

#point(200,300,300) -> p2
#plane([0,100,0],["Oxz"]) -> xzparallel
#project(p2,xzparallel) -> p2'
#intersect(["Oy"],xzparallel) -> O'
#segment(p2,p2') -> .

#autolabel("off")
#plane([0,0,100],["Oxy"]) -> alpha
#label("&{alpha}",alpha,"NEE",100)
#intersect(["Oz"],alpha) -> Z
#label("Z[0,0,100]",Z)

#quad(["Oxz"]) -> -q
#pyramid(q,[0,300,0]) -> p
#plane(["Oy"],["Oyz"],d:45) -> test
#line([[0,300,0],q.cen]) -> -test
#intersect(test,p) -> i
#altitude(p) -> ap
#label("&{alpha}",i)

#-----------------

#projectionmode("perspective")
sphere([0,0,0],200) -> sp
plane([0,100,0],["Oxz"]) -> -p
intersect(p,sp) -> spp
#intersect(["Oy"],spp) -> .

#------------------

#projectionmode("perspective")
#line([0,200,0],["Oz"]) -> l
#plane(l,["Oxz"]) -> p

#--------------------

#Задача [BUL]
#projectionmode("perspective")
#plane([0,40,0],["Oxz"]) -> alpha
#label("&{alpha}",alpha,"NEE",250)
#autolabel("on")
#point(150,300,350) -> M
#point(-50,40,500) -> A
#point(80,40,220) -> B
#point(200,40,250) -> C
#point(220,40,450) -> D
#autolabel("off")
#triangle(A,B,M) -> ABM
#triangle(C,D,M) -> CDM
#autolabel("on")
#project(M,alpha) -> O
#altitude(ABM,M) -> .[P]
#altitude(CDM,M) -> .[Q]
#autolabel("off")
#segment(M,O) -> .
#segment(O,P) -> op
#segment(O,Q) -> oq
#linestyle(op,0.5,"dotted")
#linestyle(oq,0.5,"dotted")
#anglemark(M,O,P,".)",10)
#anglemark(M,Q,C,".)",10)
#anglemark(A,P,M,".)",10)

#---------------------------------

#Задача [ARCH]
#cube(200) -> CB
#translate(CB.base.D,0,200,0) -> D1
#label("D1",D1,"N",30)
#segment(CB.base.A,D1) -> d1
#linestyle(d1,0.5,"dashed")
#segment(CB.base.C,D1) -> d2
#linestyle(d2,0.5,"dashed")
#segment(CB.base.A,CB.base.C) -> d3
#linestyle(d3,0.5,"dashed")
#anglemark(CB.base.A,D1,CB.base.C,"))")
#projectionmode("perspective")
##viewpoint([0,0,-1000]);

#----------------------------------

projectionmode("perspective")
#cube(200*sqrt(2)) -> cb
#translate(cb.base,0,-100,0) -> ha
#line(ha.cen,["Oz"]) -> -Ozparallel
#rotate(ha,d:45,Ozparallel) -> he

#----------------------------------

point(100,200,300) -> -P
line([P,[100,200,100]]) -> -L
plane(L,["Oyz"],d:45) -> -alpha
square(["Oxz"]) -> -sq
circle(P,200,alpha) -> -cr
#cube(200) -> cb
pyramid(sq,cr.cen) -> -pyr
cone(cr,pyr.base.A) -> cn
cylinder(cr,200) -> .
#transversal(L,["Ox"]) -> tr[A,B]
#autolabel("on")
